{"version":3,"sources":["components/FormErrors.jsx","components/Modal.jsx","components/LoginForm.jsx","App.js","serviceWorker.js","index.js"],"names":["FormErrors","_ref","formErrors","react_default","a","createElement","className","Object","keys","map","fieldName","i","length","reactstrap_es","color","key","CustomModal","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","onClick","id","buttonLabel","isOpen","modalTitle","React","Component","LoginForm","email","password","emailValid","passwordValid","formValid","handleInputFields","e","_this2","name","target","value","defineProperty","validateFields","fieldValidationErrors","match","validateForm","_this3","Fragment","react_fontawesome_index_es","icon","placeholder","onChange","event","valid","for","type","disabled","loginSuccess","openModal","Modal","components_FormErrors","library","add","faKey","App","light","expand","href","src","alt","height","navbar","components_LoginForm","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5457acc2.chunk.js","sourcesContent":["import React from 'react';\nimport {Alert} from 'reactstrap';\n\nconst FormErrors = ({formErrors}) =>\n\n    <div className='formErrors'>\n        {Object.keys(formErrors).map((fieldName, i) => {\n            if(formErrors[fieldName].length > 0){\n                return (\n                    <div>\n                        <Alert className={\"alert\"} color=\"danger\">\n                            <p key={i}>{fieldName} {formErrors[fieldName]}</p>\n                        </Alert>\n                    </div>\n                )\n            } else {\n                return '';\n            }\n        })}\n    </div>\n\nexport default FormErrors;","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass CustomModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <p onClick={this.toggle} id={this.props.id}>{this.props.buttonLabel}</p>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>{this.props.modalTitle}</ModalHeader>\n                    <ModalBody>\n                        That would send you to the {this.props.modalTitle} screen.\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CustomModal;","import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport FormErrors from './FormErrors.jsx';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CustomModal from \"./Modal\";\n\nclass LoginForm extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            formErrors: {email: '', password: ''},\n            emailValid: \"\",\n            passwordValid: \"\",\n            formValid: false,\n            modal: false\n        };\n\n        this.handleInputFields = this.handleInputFields.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    handleInputFields (e) {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({[name]: value},\n            () => { this.validateFields(name, value)});\n    }\n\n    validateFields (name, value) {\n        let fieldValidationErrors = this.state.formErrors;\n        let emailValid = this.state.emailValid;\n        let passwordValid = this.state.passwordValid;\n\n        switch(name) {\n            case 'email':\n                emailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n                fieldValidationErrors.email = emailValid ? '' : ' is invalid';\n                break;\n            case 'password':\n                passwordValid = value.length >= 6;\n                fieldValidationErrors.password = passwordValid ? '': ' is too short';\n                break;\n            default:\n                break;\n        }\n        this.setState({formErrors: fieldValidationErrors,\n            emailValid: emailValid,\n            passwordValid: passwordValid\n        }, this.validateForm);\n    }\n\n    validateForm() {\n        this.setState({\n            formValid: this.state.emailValid && this.state.passwordValid,\n        });\n    }\n\n    render () {\n\n        return (\n            <React.Fragment>\n            <div>\n                <div className={\"headerForm\"}>\n                    <FontAwesomeIcon icon=\"key\" />\n                    <h5>Log in The Coaching Manual</h5>\n                </div><br/><br/>\n                <div className={\"formContainer\"}>\n                    <Form>\n                        <FormGroup>\n                            <Label className={\"titles\"} ><strong>Email Address*</strong></Label>\n                            <Input\n                                name=\"email\" id=\"email\"\n                                placeholder=\"E.g hello@thecoachingmanual.com\"\n                                value={this.state.email}\n                                onChange={(event) => this.handleInputFields(event)}\n                                valid={this.state.emailValid}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label className={\"titles\"}  for=\"examplePassword\"><strong>Password*</strong></Label>\n                            <Input\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"password\"\n                                placeholder=\"*************\"\n                                value={this.state.password}\n                                onChange={(event) => this.handleInputFields(event)}\n                                valid={this.state.passwordValid}\n\n                            />\n                        </FormGroup>\n                        <Button className={\"buttonSubmitForm\"} disabled={!this.state.formValid} onClick={this.loginSuccess}><strong>Log In</strong></Button>\n                    </Form>\n                    <div className={\"optionsContainer\"} onClick={this.openModal}>\n                        <CustomModal\n                            buttonLabel={\"Forgot Password?\"}\n                            modalTitle={\"Forgot Password\"}\n                            id={\"forgot\"}\n\n                        />\n                        <p id={\"signUp\"}><span>No account?</span>\n                            <CustomModal\n                                buttonLabel={\"Sign Up\"}\n                                modalTitle={\"Sign Up\"}\n                                id={\"signUp\"}\n                            />\n                        </p>\n                    </div>\n\n                </div>\n            </div>\n                <div className={\"errorContainer\"} >\n                    <FormErrors formErrors={this.state.formErrors} />\n                </div>\n\n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default LoginForm;","import React, { Component } from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faKey } from '@fortawesome/free-solid-svg-icons'\n\nimport {\n    Collapse,\n        Navbar,\n        NavbarBrand,\n        Nav,\n        } from 'reactstrap';\nimport LoginForm from \"./components/LoginForm\";\n\n\nlibrary.add(faKey);\n\nclass App extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className={\"line\"}></div>\n                <div>\n                    <Navbar color=\"dark\" light expand=\"md\">\n                        <NavbarBrand href=\"/\">\n                            <img src=\"https://cdn0.iconfinder.com/data/icons/flatty-balls/633/02_FlatBallIcons_Soccer-512.png\" alt=\"20px\" height={\"30px\"}/>\n                        </NavbarBrand>\n\n                        <Collapse navbar>\n                            <Nav className=\"ml-auto\" navbar>\n\n                            </Nav>\n                        </Collapse>\n                    </Navbar>\n                </div>\n              <div className={\"fullContainer\"}>\n                  <LoginForm />\n              </div>\n\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}